CREATE TABLE customer_visit (
    id SERIAL PRIMARY KEY,
    customer_id INT,
    created_at TIMESTAMP,
    visit_length INT,
    landing_page VARCHAR(255),
    exit_page VARCHAR(255),
    utm_source VARCHAR(255)
);

CREATE TABLE customer_visit_page (
    id SERIAL PRIMARY KEY,
    visit_id INT,
    page VARCHAR(255),
    time_on_page INT,
    FOREIGN KEY (visit_id) REFERENCES customer_visit(id)
);


INSERT INTO customer_visit (customer_id, created_at, visit_length, landing_page, exit_page, utm_source)
VALUES
    (1, '2023-03-01 08:00:00', 300, '/home', '/products', 'google'),
    (1, '2023-03-02 09:00:00', 600, '/home', '/checkout', 'facebook'),
    (2, '2023-03-01 10:00:00', 450, '/products', '/home', 'direct'),
    (3, '2023-03-03 11:30:00', 500, '/home', '/contact', 'google');


INSERT INTO customer_visit_page (visit_id, page, time_on_page)
VALUES
    (1, '/home', 120),
    (1, '/about', 60),
    (1, '/products', 120),
    (2, '/home', 200),
    (2, '/products', 300),
    (2, '/checkout', 100),
    (3, '/products', 450),
    (3, '/home', 0),
    (4, '/home', 300),
    (4, '/contact', 200);



SELECT customer_id, MAX(created_at) AS last_visit_date
FROM customer_visit
GROUP BY customer_id;


SELECT cv.customer_id, AVG(page_count) AS avg_pages_per_visit
FROM customer_visit cv
JOIN (SELECT visit_id, COUNT(*) AS page_count FROM customer_visit_page GROUP BY visit_id) p
ON cv.id = p.visit_id
GROUP BY cv.customer_id;


SELECT cv.customer_id, cvp.page
FROM customer_visit cv
JOIN customer_visit_page cvp ON cv.id = cvp.visit_id
WHERE cv.visit_length > (SELECT AVG(visit_length) FROM customer_visit WHERE customer_id = cv.customer_id)
GROUP BY cv.customer_id, cvp.page;

